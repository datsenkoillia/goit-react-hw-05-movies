{"version":3,"file":"static/js/610.70c29575.chunk.js","mappings":"2NAEO,SAASA,EAAT,GAAyC,IAAXC,EAAU,EAAVA,OAC7BC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYD,GAAME,MAAO,CAAEC,KAAMP,GAAzC,SACGG,KAFIC,EADC,KASjB,CAEM,SAASI,EAAT,GAAuC,IAAXT,EAAU,EAAVA,OAC3BC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAV,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,GAAME,MAAO,CAAEC,KAAMP,GAAlC,SACGG,KAFIC,EADC,KASjB,C,+FCkCD,UA3DmB,WACjB,OAAuCK,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAqBC,EAArB,KAEA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOb,EAAP,KAAec,EAAf,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KAEMC,EAAQN,EAAaO,IAAI,SA6B/B,OAfAC,EAAAA,EAAAA,YAAU,WACJF,IACFD,GAAY,IACZI,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,YAA4B,IAAjBC,EAAgB,EAAxBC,KAAQD,QACfR,GAAU,OAAIQ,GACf,IACAE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,WACPZ,GAAY,EACb,IAEN,GAAE,CAACC,KAIF,iCACE,kBAAMY,SA7BW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,SAASjB,MAAMkB,MACjB,KAAtBH,EAAWI,OAKfxB,EAAe,CAAEK,MAAOe,EAAWI,SAJjCC,MAAM,wBAKT,EAoBG,WACE,kBAAOC,KAAK,OAAOC,KAAK,QAAQC,aAAcvB,KAC9C,mBAAQqB,KAAK,SAAb,SAAsB,eAExB,+BACIvB,IACA,gCACGf,EAAOyC,OAAS,IACf,SAAC,IAAD,CACEzC,OAAQA,IAGO,IAAlBA,EAAOyC,QAAgBxB,IACtB,uBAAG,iEAOhB,C,oKC5DDyB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAc,SAAAC,GACzB,OAAOH,EAAAA,EAAAA,GAAM,qBAAsB,CACjCI,OAAQ,CACNC,QAASJ,EACTE,KAAAA,IAGL,EAEYG,EAAoB,SAAA3C,GAC/B,OAAOqC,EAAAA,EAAAA,GAAM,SAAD,OAAUrC,GAAM,CAC1ByC,OAAQ,CACNC,QAASJ,IAGd,EAEYM,EAAoB,SAAA5C,GAC/B,OAAOqC,EAAAA,EAAAA,GAAM,SAAD,OAAUrC,EAAV,YAAwB,CAClCyC,OAAQ,CACNC,QAASJ,IAGd,EAEYO,EAAoB,SAAA7C,GAC/B,OAAOqC,EAAAA,EAAAA,GAAM,SAAD,OAAUrC,EAAV,YAAwB,CAClCyC,OAAQ,CACNC,QAASJ,IAGd,EAEYvB,EAAoB,SAAAH,GAC/B,OAAOyB,EAAAA,EAAAA,GAAM,eAAgB,CAC3BI,OAAQ,CACNC,QAASJ,EACT1B,MAAOA,IAGZ,C","sources":["components/MoviesList/MoviesList.jsx","pages/MoviePage/MoviesPage.jsx","servises/movies-api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nexport function TrandingMoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ title, id }) => (\n        <li key={id}>\n          <Link to={`movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport function SearchMoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(({ title, id }) => (\n        <li key={id}>\n          <Link to={`${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovies } from 'servises/movies-api';\nimport { SearchMoviesList } from 'components/MoviesList/MoviesList';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearhParams] = useSearchParams();\n\n  const [movies, setMovies] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n\n  const query = searchParams.get('query');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const searchText = e.target.elements.query.value;\n    if (searchText.trim() === '') {\n      alert('Enter data for search');\n      return;\n    }\n\n    setSearhParams({ query: searchText.trim() });\n  };\n\n\n  useEffect(() => {\n    if (query) {\n      setIsLoader(true);\n      fetchSearchMovies(query)\n        .then(({ data: { results } }) => {\n          setMovies([...results]);\n        })\n        .catch(error => console.log(error))\n        .finally(() => {\n          setIsLoader(false);\n        });\n    }\n  }, [query]);\n\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"query\" defaultValue={query} />\n        <button type=\"submit\">Search</button>\n      </form>\n      <>\n        {!isLoader && (\n          <>\n            {movies.length > 0 && (\n              <SearchMoviesList\n                movies={movies}\n              />\n            )}\n            {movies.length === 0 && query && (\n              <p>No matches found! Please enter other data for search.</p>\n            )}\n          </>\n        )}\n      </>\n    </>\n  );\n};\n\nexport default MoviesPage;\n\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '80fe24ea6ea4db327f1f3c79898b7ba2';\n\nexport const fetchMovies = page => {\n  return axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieDetails = id => {\n  return axios(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = id => {\n  return axios(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieCredits = id => {\n  return axios(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchSearchMovies = query => {\n  return axios('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n};\n"],"names":["TrandingMoviesList","movies","location","useLocation","map","title","id","to","state","from","SearchMoviesList","useSearchParams","searchParams","setSearhParams","useState","setMovies","isLoader","setIsLoader","query","get","useEffect","fetchSearchMovies","then","results","data","catch","error","console","log","finally","onSubmit","e","preventDefault","searchText","target","elements","value","trim","alert","type","name","defaultValue","length","axios","API_KEY","fetchMovies","page","params","api_key","fetchMovieDetails","fetchMovieReviews","fetchMovieCredits"],"sourceRoot":""}