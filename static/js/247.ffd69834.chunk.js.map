{"version":3,"file":"static/js/247.ffd69834.chunk.js","mappings":"8LAsDA,UAlDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAoCE,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACRD,GAAY,IACZE,EAAAA,EAAAA,IAAkBV,GACfW,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPN,EAAQM,EAAKP,MACbD,GAAc,EACf,IACAS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,WACPT,GAAY,EACb,GACJ,GAAE,CAACR,KAGF,+BACIO,GAAYJ,IACZ,8BACGE,EAAKa,OAAS,GACb,wBACGb,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,GAAIC,EAAjC,EAAiCA,aAAjC,OACR,2BACE,yBAAIH,EAAc,OACjBG,GACC,gBACEC,IAAG,wCAAmCD,GACtCE,IAAKL,KAGP,uBAAG,cAEL,yBAAG,cAAYC,EAAU,SAVlBC,EADD,OAgBZ,uBAAG,8CAMd,C,oKClDDI,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAc,SAAAC,GACzB,OAAOH,EAAAA,EAAAA,GAAM,qBAAsB,CACjCI,OAAQ,CACNC,QAASJ,EACTE,KAAAA,IAGL,EAEYG,EAAoB,SAAAV,GAC/B,OAAOI,EAAAA,EAAAA,GAAM,SAAD,OAAUJ,GAAM,CAC1BQ,OAAQ,CACNC,QAASJ,IAGd,EAEYM,EAAoB,SAAAX,GAC/B,OAAOI,EAAAA,EAAAA,GAAM,SAAD,OAAUJ,EAAV,YAAwB,CAClCQ,OAAQ,CACNC,QAASJ,IAGd,EAEYjB,EAAoB,SAAAY,GAC/B,OAAOI,EAAAA,EAAAA,GAAM,SAAD,OAAUJ,EAAV,YAAwB,CAClCQ,OAAQ,CACNC,QAASJ,IAGd,EAEYO,EAAoB,SAAAC,GAC/B,OAAOT,EAAAA,EAAAA,GAAM,eAAgB,CAC3BI,OAAQ,CACNC,QAASJ,EACTQ,MAAOA,IAGZ,C","sources":["components/Cast/Cast.jsx","servises/movies-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from 'servises/movies-api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [isCastShow, setIsCastShow] = useState(false);\n  const [cast, setCast] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n\n  useEffect(() => {\n    setIsLoader(true);\n    fetchMovieCredits(movieId)\n      .then(({ data }) => {\n        setCast(data.cast);\n        setIsCastShow(true);\n      })\n      .catch(error => console.log(error))\n      .finally(() => {\n        setIsLoader(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {!isLoader && isCastShow && (\n        <>\n          {cast.length > 0 ? (\n            <ul>\n              {cast.map(({ original_name, character, id, profile_path }) => (\n                <li key={id}>\n                  <p>{original_name} </p>\n                  {profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w92${profile_path}`}\n                      alt={original_name}\n                    />\n                  ) : (\n                    <p>No Photo</p>\n                  )}\n                  <p>Character: {character} </p>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>We don't have any casts for this movie</p>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '80fe24ea6ea4db327f1f3c79898b7ba2';\n\nexport const fetchMovies = page => {\n  return axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieDetails = id => {\n  return axios(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = id => {\n  return axios(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieCredits = id => {\n  return axios(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchSearchMovies = query => {\n  return axios('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n};\n"],"names":["movieId","useParams","useState","isCastShow","setIsCastShow","cast","setCast","isLoader","setIsLoader","useEffect","fetchMovieCredits","then","data","catch","error","console","log","finally","length","map","original_name","character","id","profile_path","src","alt","axios","API_KEY","fetchMovies","page","params","api_key","fetchMovieDetails","fetchMovieReviews","fetchSearchMovies","query"],"sourceRoot":""}