{"version":3,"file":"static/js/978.2308e831.chunk.js","mappings":"2PAEaA,EAAmBC,EAAAA,GAAAA,IAAH,4IAQhBC,EAAgBD,EAAAA,GAAAA,IAAH,6DAIbE,EAAeF,EAAAA,GAAAA,OAAH,uE,SCkFzB,EAtFkB,WAAO,IAAD,IACdG,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAEnD,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,WAAS,GAAzC,eAAOK,EAAP,KAAiBC,EAAjB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,GAAY,IACZE,EAAAA,EAAAA,IAAkBhB,GACfiB,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPN,EAASM,GACTR,GAAe,EAChB,IACAS,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,IACXG,SAAQ,WACPT,GAAY,EACb,GACJ,GAAE,CAACd,IAEJ,IAAQwB,EACNb,EADMa,YAAaC,EACnBd,EADmBc,MAAOC,EAC1Bf,EAD0Be,aAAcC,EACxChB,EADwCgB,aAAcC,EACtDjB,EADsDiB,SAAUC,EAChElB,EADgEkB,OAGlE,OACE,+BACIhB,GAAYJ,IACZ,iCACE,SAAC,KAAD,CAAMqB,GAAI1B,EAAY2B,QAAtB,UACE,SAAChC,EAAD,CAAciC,KAAK,SAAnB,SAA4B,uBAG9B,UAACpC,EAAD,YACE,yBACG4B,GACC,gBACES,IAAG,yCAAoCT,GACvCU,IAAKT,KAGP,gBACEQ,IAAG,uEACHC,IAAKT,EACLU,MAAM,QACNC,OAAO,aAIb,4BACE,0BACGX,EAAM,KAAC,4BAAM,IAAEC,EAAaW,MAAM,EAAG,GAAG,WAE3C,yBAAG,eAAaC,KAAKC,MAAqB,GAAfZ,GAAmB,QAC9C,wBAAI,cACJ,uBAAIC,KACJ,wBAAI,WACHC,EAAOW,OAAS,GACf,uBAAIX,EAAOY,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,SAEzC,uBAAG,iBAKT,UAAC9C,EAAD,YACE,uBAAG,4BACH,2BACE,yBACE,SAAC,KAAD,CAAMgC,GAAG,OAAT,SAAgB,YAElB,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,SAAmB,qBAIzB,SAAC,EAAAe,SAAD,CAAUC,UAAU,yBAAK,QAAzB,UACE,SAAC,KAAD,UAMX,C,oKC5FDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAc,SAAAC,GACzB,OAAOH,EAAAA,EAAAA,GAAM,qBAAsB,CACjCI,OAAQ,CACNC,QAASJ,EACTE,KAAAA,IAGL,EAEYlC,EAAoB,SAAAqC,GAC/B,OAAON,EAAAA,EAAAA,GAAM,SAAD,OAAUM,GAAM,CAC1BF,OAAQ,CACNC,QAASJ,IAGd,EAEYM,EAAoB,SAAAD,GAC/B,OAAON,EAAAA,EAAAA,GAAM,SAAD,OAAUM,EAAV,YAAwB,CAClCF,OAAQ,CACNC,QAASJ,IAGd,EAEYO,EAAoB,SAAAF,GAC/B,OAAON,EAAAA,EAAAA,GAAM,SAAD,OAAUM,EAAV,YAAwB,CAClCF,OAAQ,CACNC,QAASJ,IAGd,EAEYQ,EAAoB,SAAAC,GAC/B,OAAOV,EAAAA,EAAAA,GAAM,eAAgB,CAC3BI,OAAQ,CACNC,QAASJ,EACTS,MAAOA,IAGZ,C","sources":["components/MovieItem/MovieItem.styled.js","components/MovieItem/MovieItem.jsx","servises/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieItemWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-bottom: 2px solid #aaaaaa;\n`;\n\nexport const AddInfWrapper = styled.div`\n  border-bottom: 2px solid #aaaaaa;\n`;\n\nexport const GoBackButton = styled.button`\n  &:hover {\n    background-color: #fff;\n  }\n`;\n","import React, { Suspense } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, useRef } from 'react';\nimport { fetchMovieDetails } from 'servises/movies-api';\nimport {\n  AddInfWrapper,\n  GoBackButton,\n  MovieItemWrapper,\n} from './MovieItem.styled';\n\nconst MovieItem = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  const backLinkRef = useRef(location.state?.from ?? '/');\n\n  const [isMovieShow, setIsMovieShow] = useState(false);\n  const [movie, setMovie] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n\n  useEffect(() => {\n    setIsLoader(true);\n    fetchMovieDetails(movieId)\n      .then(({ data }) => {\n        setMovie(data);\n        setIsMovieShow(true);\n      })\n      .catch(error => console.log(error))\n      .finally(() => {\n        setIsLoader(false);\n      });\n  }, [movieId]);\n\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n\n  return (\n    <>\n      {!isLoader && isMovieShow && (\n        <>\n          <Link to={backLinkRef.current}>\n            <GoBackButton type=\"button\">&#8592; Go back </GoBackButton>\n          </Link>\n\n          <MovieItemWrapper>\n            <div>\n              {poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w300${poster_path}`}\n                  alt={title}\n                />\n              ) : (\n                <img\n                  src={`https://upload.wikimedia.org/wikipedia/en/d/d6/Image_coming_soon.png`}\n                  alt={title}\n                  width=\"300px\"\n                  height=\"480px\"\n                />\n              )}\n            </div>\n            <div>\n              <h1>\n                {title} <span>({release_date.slice(0, 4)})</span>\n              </h1>\n              <p>User Score: {Math.floor(vote_average * 10)}%</p>\n              <h2>Overview</h2>\n              <p>{overview}</p>\n              <h3>Genres</h3>\n              {genres.length > 0 ? (\n                <p>{genres.map(genre => genre.name).join(', ')}</p>\n              ) : (\n                <p>Other</p>\n              )}\n            </div>\n          </MovieItemWrapper>\n\n          <AddInfWrapper>\n            <p>Additional information</p>\n            <ul>\n              <li>\n                <Link to=\"cast\">Cast</Link>\n              </li>\n              <li>\n                <Link to=\"reviews\">Reviews</Link>\n              </li>\n            </ul>\n          </AddInfWrapper>\n          <Suspense fallback={<div>...</div>}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieItem;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '80fe24ea6ea4db327f1f3c79898b7ba2';\n\nexport const fetchMovies = page => {\n  return axios('trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n      page,\n    },\n  });\n};\n\nexport const fetchMovieDetails = id => {\n  return axios(`movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieReviews = id => {\n  return axios(`movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchMovieCredits = id => {\n  return axios(`movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n};\n\nexport const fetchSearchMovies = query => {\n  return axios('search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  });\n};\n"],"names":["MovieItemWrapper","styled","AddInfWrapper","GoBackButton","movieId","useParams","location","useLocation","backLinkRef","useRef","state","from","useState","isMovieShow","setIsMovieShow","movie","setMovie","isLoader","setIsLoader","useEffect","fetchMovieDetails","then","data","catch","error","console","log","finally","poster_path","title","release_date","vote_average","overview","genres","to","current","type","src","alt","width","height","slice","Math","floor","length","map","genre","name","join","Suspense","fallback","axios","API_KEY","fetchMovies","page","params","api_key","id","fetchMovieReviews","fetchMovieCredits","fetchSearchMovies","query"],"sourceRoot":""}